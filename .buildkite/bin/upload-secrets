#!/bin/bash -ie

if [ -z "$SECRETS_BUCKET" ]; then
  echo "SECRETS_BUCKET is not specified"
  exit 1
fi

if [ -z "$SECRETS_PREFIX" ]; then
  echo "SECRETS_PREFIX is not specified"
  exit 1
fi

if [ -z "$SECRETS_KEY" ]; then
  echo "SECRETS_KEY is not specified"
  exit 1
fi

upload() {
  local key=$1
  AWS_ACCESS_KEY_ID="$TF_VAR_access_key"
  AWS_SECRET_ACCESS_KEY="$TF_VAR_secret_key"
  AWS_DEFAULT_REGION="$TF_VAR_region"
  aws s3 cp --acl private --sse-c --sse-c-key "$SECRETS_KEY" - "s3://${SECRETS_BUCKET}/${SECRETS_PREFIX}/${key}"
}

ssh_config() {
  echo "mkdir -p ~/.ssh/cm"
  echo "chmod 0700 ~/.ssh"
  cat <<EOT
cat <<SSH_CONFIG > ~/.ssh/config
Host bastion-* *.plain.edh.ro
  ForwardAgent yes
  TCPKeepAlive yes
  ServerAliveInterval 300
  StrictHostKeyChecking no
  ControlPath ~/.ssh/cm/%r@%h:%p
  ControlMaster auto
  ControlPersist 10m
  User deployer

Host bastion-production
  Hostname bastion.everydayhero.io

Host bastion-staging
  Hostname bastion.everydayhero-staging.io

Host production-*.plain.edh.ro
  ProxyCommand ssh -q bastion-production 'ncat \\\`echo %h | cut -f 1-1 -d.\\\` %p'

Host staging-*.plain.edh.ro
  ProxyCommand ssh -q bastion-staging 'ncat \\\`echo %h | cut -f 1-1 -d.\\\` %p'

Host github.com
  StrictHostKeyChecking no
SSH_CONFIG
EOT
}

docker_auth() {
  local docker_hub_auth=$(echo "${DOCKER_HUB_USER}:${DOCKER_HUB_PASSWORD}" | base64)
  local quay_auth=$(echo "${QUAY_USER}:${QUAY_PASSWORD}" | base64)

  jq -n -r -c --arg docker_hub_auth "$docker_hub_auth" --arg quay_auth "$quay_auth" '
    {
      "https://index.docker.io/v1/": {
        auth: $docker_hub_auth
      },
      "quay.io": {
        auth: $quay_auth
      }
    } as $auths | @sh "export DOCKER_AUTH=\($auths | tojson)"
  '
}

configure_plain() {
  local code_dir=~/Code
  echo "mkdir -p $code_dir"

  for repo in configure plain-utils; do
    cat <<EOT
if [ -d "$code_dir/$repo" ] ; then
  cd "$code_dir/$repo" && git fetch origin master
else
  cd "$code_dir" && git clone "git@github.com:everydayhero/${repo}.git"
fi
export PATH="${code_dir}/${repo}/bin:\$PATH"
EOT
  done
}

private_key() {
  for key in deployer id_rsa; do
    local keypath="~/.ssh/$key"
    if [ -f "$keypath" ]; then
      cat "$keypath"
      return 0
    fi
  done

  return 1
}

echo "~~~ Uploading id_rsa"
private_key | upload "${SSH_KEY_NAME:-id_rsa_github}"

echo "~~~ Uploading env"
cat <<ENV | upload "env"
$(ssh_config)
$(docker_auth)
$(configure_plain)
ENV
