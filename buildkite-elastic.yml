
## Provides the infrastructure for a scalable buildkite cluster

Parameters:
  KeyName:
    Description: The ssh keypair used to access the buildkite instances
    Type: AWS::EC2::KeyPair::KeyName

  BuildkiteOrgSlug:
    Description: Your Buildkite organization slug
    Type: String

  BuildkiteAgentToken:
    Description: Your Buildkite agent token from Buildkite.com
    Type: String
    NoEcho: true

  BuildkiteAgentMetadata:
    Description: The metadata to register the agent with
    Type: String
    Default: queue=elastic,docker=1.6,dockercompose=1.3

  ProvisionBucket:
    Description: An s3 bucket containing dockercfg and id_rsa_buildkite
    Type: String

  AuthorizedUsersUrl:
    Description: An optional url to periodically download ssh authorized_keys from
    Type: String

  VpcId:
    Type: AWS::EC2::VPC::Id
    Description: VpcId of your existing Virtual Private Cloud (VPC).

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The list of SubnetIds where the instances will be launched

  InstanceType:
    Description: The type of instance to use for the agent
    Type: String
    Default: m3.medium
    AllowedValues:
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - t2.micro
      - t2.small
      - t2.medium
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge

  SpotPrice:
    Description: An optional spot price to use for the agents
    Type: String
    Default: 0

  MaxSize:
    Description: The maximum number of agents to launch
    Type: Number
    Default: 6

  MinSize:
    Description: The minumum number of agents to launch
    Type: Number
    Default: 1

  AgentsPerHost:
    Description: The number of buildkite agents to run per host
    Type: Number
    Default: 10

  RootVolumeSize:
    Description: Size of EBS volume for root filesystem in GB.
    Type: Number
    Default: 200

Conditions:
    UseSpotInstances:
      !Not [ !Equals [ $(SpotPrice), 0 ] ]

Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ $(IAMRole) ]
  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  # Policies for the agent instances
  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
            Resource: "*"
          - Effect: Allow
            Action:
              - s3:GetObject
              - s3:GetObjectVersion
              - s3:ListBucket
              - s3:ListBucketVersions
            Resource: "arn:aws:s3:::$(ProvisionBucket)/*"
      Roles:
        - $(IAMRole)

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: true
      SecurityGroups: [ $(SecurityGroup) ]
      KeyName : $(KeyName)
      IamInstanceProfile: $(IAMInstanceProfile)
      InstanceType: $(InstanceType)
      SpotPrice: !If [ "UseSpotInstances", $(SpotPrice), '$(AWS::NoValue)' ]
      ImageId : $(AWSArch2AMI[$(AWS::Region)][$(AWSInstanceType2Arch[$(InstanceType)][Arch])])
      BlockDeviceMappings:
        - DeviceName: /dev/sda1
          Ebs: { VolumeSize: $(RootVolumeSize), VolumeType: gp2 }
      UserData: !Base64 |
        #!/bin/bash -xv
        /usr/local/bin/cfn-init -s $(AWS::StackId) -r AgentLaunchConfiguration --region $(AWS::Region)
        /usr/local/bin/cfn-signal -e \$? -r 'cfn-init finished' \
          --stack $(AWS::StackName) --resource 'AgentAutoScaleGroup' --region $(AWS::Region)

    Metadata:
      AWS::CloudFormation::Authentication:
        S3AccessCreds:
          type: S3
          roleName: $(IAMRole)
          buckets: $(ProvisionBucket)

      # see http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-init.html
      AWS::CloudFormation::Init:
        config:
          files:
            "/root/.ssh/id_rsa":
              source: "https://s3.amazonaws.com/$(ProvisionBucket)/id_rsa_buildkite"
              mode: '000400'
              owner: root
              group: root
              authentication: S3AccessCreds
            "/home/ubuntu/.dockercfg":
              source: "https://s3.amazonaws.com/$(ProvisionBucket)/dockercfg"
              mode: '000400'
              owner: ubuntu
              group: ubuntu
              authentication: S3AccessCreds
            "/etc/buildkite-agent/buildkite-agent.cfg":
              content: |
                token="$(BuildkiteAgentToken)"
                name="elastic-%hostname-%n"
                meta-data="$(BuildkiteAgentMetadata)"
                bootstrap-script="/usr/share/buildkite-agent/bootstrap.sh"
                build-path="/var/lib/buildkite-agent/builds"
                hooks-path="/etc/buildkite-agent/hooks"
              mode: '000600'
              owner: root
              group: root
            "/etc/cron.hourly/authorized_keys":
              content: |
                #!/bin/bash -eu
                test -z "$(AuthorizedUsersUrl)" && exit 0
                curl --silent -f "$(AuthorizedUsersUrl)" > /tmp/authorized_keys
                mv /tmp/authorized_keys /home/ubuntu/.ssh/authorized_keys
                chmod 600 /home/ubuntu/.ssh/authorized_keys
                chown ubuntu: /home/ubuntu/.ssh/authorized_keys
              mode: '000700'
              owner: root
              group: root
            "/etc/cron.d/cloudwatch":
              content: |
                */2 * * * * root perl /usr/local/aws-scripts-mon/mon-put-instance-data.pl --mem-util --disk-space-util --disk-path=/ --disk-path=/var/lib/docker --from-cron
              mode: '000700'
              owner: root
              group: root
          commands:
            01-enable-ssh-agent-systemd:
              command: |
                systemctl daemon-reload
                systemctl enable ssh-agent
                systemctl start ssh-agent
            02-enable-buildkite-systemd:
              command: |
                bash -c 'seq 1 $(AgentsPerHost) | xargs -n1 -I {} systemctl enable buildkite-agent@{}.service'
                bash -c 'seq 1 $(AgentsPerHost) | xargs -n1 -I {} systemctl start buildkite-agent@{}.service'
            03-fetch-authorized-users:
              command: /etc/cron.hourly/authorized_keys

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: $(Subnets)
      LaunchConfigurationName: $(AgentLaunchConfiguration)
      MinSize: $(MinSize)
      MaxSize: $(MaxSize)
      Tags:
        - { Key: Role, Value: buildkite-agent, PropagateAtLaunch: true }
    CreationPolicy:
      ResourceSignal:
        Timeout: PT20M
        Count: $(MinSize)
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: $(MinSize)
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  AgentScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: $(AgentAutoScaleGroup)
      Cooldown: 60
      ScalingAdjustment: 1

  AgentScaleDownPolicy:
    Type : AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: $(AgentAutoScaleGroup)
      Cooldown : 60
      ScalingAdjustment : -1

  CPUAlarmHigh:
   Type: AWS::CloudWatch::Alarm
   Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions: [ $(AgentScaleUpPolicy) ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: $(AgentAutoScaleGroup)
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
   Type: AWS::CloudWatch::Alarm
   Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions: [ $(AgentScaleDownPolicy) ]
      Dimensions:
        - Name: AutoScalingGroupName
          Value: $(AgentAutoScaleGroup)
      ComparisonOperator: LessThanThreshold

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to SSH
      VpcId: $(VpcId)
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0