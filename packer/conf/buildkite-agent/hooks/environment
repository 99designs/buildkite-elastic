#!/bin/bash

set -eu -o pipefail

# shellcheck source=/dev/null
source ~/cfn-env

echo "~~~ :llama: Setting up elastic stack environment ($BUILDKITE_STACK_VERSION)"
cat ~/cfn-env

if [[ -n "${AWS_ASSUME_IAM_ROLE:-}"]] ; then
  IAM_ROLE=${AWS_ASSUME_IAM_ROLE}
  aws_cred_tmp=$(mktemp -t aws-json-XXXXXX)

  echo "Assuming IAM Role $AWS_ASSUME_IAM_ROLE"
  aws sts assume-role --role-arn "${role}" --role-session-name bk-${BUILDKITE_JOB_ID} > "${aws_cred_tmp}"

  export AWS_ACCESS_KEY_ID=$(cat ${aws_cred_tmp} | jq -r ".Credentials.AccessKeyId")
  export AWS_SECRET_ACCESS_KEY=$(cat ${aws_cred_tmp} | jq -r ".Credentials.SecretAccessKey")
  export AWS_SESSION_TOKEN=$(cat ${aws_cred_tmp} | jq -r ".Credentials.SessionToken")
  export AWS_SESSION_EXPIRATION=$(cat ${aws_cred_tmp} | jq -r ".Credentials.Expiration")

  rm aws_cred_tmp

  # If we have a role, block the metadata service
  export AWS_BLOCK_METADATA_SERVICE=true
fi

if [[ ${AWS_BLOCK_METADATA_SERVICE:-false} =~ (on|1|true)]] ; then
  echo "Blocking AWS Metadata Serrvice"
  sudo /usr/bin/block-ec2-metadata-service
fi

echo "Checking docker processes"
pgrep -lf docker

echo "Configuring built-in plugins"

[[ ! ${SECRETS_PLUGIN_ENABLED:-true} =~ (on|1|true) ]] && PLUGINS_ENABLED=${PLUGINS_ENABLED/secrets/}
[[ ! ${DOCKER_LOGIN_PLUGIN_ENABLED:-true} =~ (on|1|true) ]] && PLUGINS_ENABLED=${PLUGINS_ENABLED/docker-login/}
[[ ! ${ECR_PLUGIN_ENABLED:-true} =~ (on|1|true) ]] && PLUGINS_ENABLED=${PLUGINS_ENABLED/ecr/}

SECRETS_PLUGIN_ENABLED=0
DOCKER_LOGIN_PLUGIN_ENABLED=0
ECR_PLUGIN_ENABLED=0

for plugin in $PLUGINS_ENABLED ; do
  case "$plugin" in
    secrets)
      export SECRETS_PLUGIN_ENABLED=1
      echo "Secrets plugin enabled"
      ;;
    docker-login)
      export DOCKER_LOGIN_PLUGIN_ENABLED=1
      echo "Docker-login plugin enabled"
      ;;
    ecr)
      export ECR_PLUGIN_ENABLED=1
      echo "ECR plugin enabled"
      ;;
  esac
done

if [[ -n "${BUILDKITE_SECRETS_BUCKET:-}" &&  "${SECRETS_PLUGIN_ENABLED:-}" == "1" ]] ; then
  export BUILDKITE_PLUGIN_S3_SECRETS_BUCKET="$BUILDKITE_SECRETS_BUCKET"

  # shellcheck source=/dev/null
  source /usr/local/buildkite-aws-stack/plugins/secrets/hooks/environment
fi

if [[ "${DOCKER_USERNS_REMAP:-false}" == "false" ]] ; then
  # We need to scope the next bit to only the currently running agent dir and
  # pipeline, but we also need to control security and make sure arbitrary folders
  # can't be chmoded.
  #
  # The agent builds path isn't exposed nicely by itself. The agent name also
  # doesn't quite map to its builds path. We do have a complete checkout path,
  # but we need to chop it up, safely. The path looks like:
  #
  #   BUILDKITE_BUILD_CHECKOUT_PATH="/var/lib/buildkite-agent/builds/my-agent-1/my-org/my-pipeline"
  #
  # We know the beginning of this path, it's in BUILDKITE_BUILD_PATH:
  #
  #   BUILDKITE_BUILD_PATH="/var/lib/buildkite-agent/builds"

  # So we can calculate the suffix as a substring:
  AGENT_ORG_PIPELINE_DIR="${BUILDKITE_BUILD_CHECKOUT_PATH#${BUILDKITE_BUILD_PATH}/}"
  # => "my-agent-1/my-org/my-pipeline"

  # Then we can grab just the first path component, the agent name, by removing
  # the longest suffix starting with a slash:
  AGENT_DIR="${AGENT_ORG_PIPELINE_DIR%%/*}"
  # => "my-agent-1"

  # Then we can figure out the org/pipeline path component
  ORG_PIPELINE_DIR="${AGENT_ORG_PIPELINE_DIR#${AGENT_DIR}/}"
  # => "my-org/my-pipeline"

  # Then we grab just the first path component, the org, by removing the longest
  # suffix starting with a slash:
  ORG_DIR="${ORG_PIPELINE_DIR%%/*}"
  # => "my-org"

  # Then we can figure out the pipeline path component using the org dir
  PIPELINE_DIR="${ORG_PIPELINE_DIR#${ORG_DIR}/}"
  # => "my-pipeline"

  # Now we can pass this to the sudo script which will validate it before safely chmodding:
  echo "Fixing permissions for '${AGENT_DIR}/${ORG_DIR}/${PIPELINE_DIR}'..."
  sudo /usr/bin/fix-buildkite-agent-builds-permissions "${AGENT_DIR}" "${ORG_DIR}" "${PIPELINE_DIR}"
  echo
fi
