#!/bin/bash

set -eu -o pipefail

s3_exists() {
  env -i aws s3 ls "$1" --summarize --human-readable | \
    # `s3 ls` does wildcard matching, so `private_ssh_key` matches `private_ssh_key_old`, e.g.:
    # 2016-03-01 17:40:53    1.6 KiB private_ssh_key_old
    #
    # So we need to grep the output for an exact filename match
    grep "$(basename "$1")\$"
}

s3_download() {
  local aws_s3_args=("--quiet")

  if [[ -n "${BUILDKITE_SECRETS_KEY:-}" ]] ; then
    aws_s3_args+=("--sse-c" "AES256" "--sse-c-key" "${BUILDKITE_SECRETS_KEY}")
  elif [[ -n "${BUILDKITE_USE_KMS:-}" ]] ; then
    aws_s3_args+=("--sse" "aws:kms")
  fi

  env -i aws s3 cp --quiet ${aws_s3_args[@]} "$1" /dev/stdout
}

echo "~~~ Setting up the environment"

echo "Sourcing CloudFormation environment..."
eval "$(cat ~/cfn-env)"
echo

echo "Starting an SSH Agent..."
eval "$(ssh-agent -s)"
echo

if [[ -n "${BUILDKITE_SECRETS_BUCKET:-}" ]] ; then
  echo "Downloading secrets..."
  echo

  # Allow environment vars set in Buildkite to override paths
  secrets_prefix="${BUILDKITE_SECRETS_PREFIX:-$BUILDKITE_PIPELINE_SLUG}"
  secrets_url_base="s3://${BUILDKITE_SECRETS_BUCKET}/${secrets_prefix}"
  ssh_key_url="${secrets_url_base}/${SSH_KEY_NAME:-private_ssh_key}"
  legacy_ssh_key_url="${secrets_url_base}/id_rsa_github"
  shared_ssh_key_url="s3://${BUILDKITE_SECRETS_BUCKET}/${SHARED_SSH_KEY_NAME:-private_ssh_key}"
  env_url="${secrets_url_base}/env"
  shared_env_url="s3://${BUILDKITE_SECRETS_BUCKET}/env"

  if s3_exists "$ssh_key_url" ; then
    echo "Downloading ssh key from $ssh_key_url"
    ssh-add <(s3_download "$ssh_key_url")
  elif s3_exists "$legacy_ssh_key_url" ; then
    echo "Downloading ssh key from $legacy_ssh_key_url"
    ssh-add <(s3_download "$legacy_ssh_key_url")
  elif s3_exists "$shared_ssh_key_url" ; then
    echo "Downloading ssh key from $shared_ssh_key_url"
    ssh-add <(s3_download "$shared_ssh_key_url")
  else
    echo "No SSH keys found in s3://${BUILDKITE_SECRETS_BUCKET}"
  fi
  echo

  if s3_exists "$shared_env_url" ; then
    echo "Downloading shared env from $shared_env_url"
    eval "$(s3_download $shared_env_url)"
    echo
  fi
  if s3_exists "$env_url" ; then
    echo "Downloading env from $env_url"
    eval "$(s3_download $env_url)"
    echo
  fi
fi

echo "Waiting for Docker..."
timeout 30 docker ps
echo

unset BUILDKITE_SECRETS_BUCKET
unset BUILDKITE_SECRETS_KEY

# We need to scope the next bit to only the currently running agent's builds,
# but we also need to control security and make sure arbitrary folders can't be
# chmoded.
#
# The agent builds path isn't exposed nicely by itself. The agent name also
# doesn't quite map to its builds path. We do have a complete checkout path,
# but we need to chop it up, safely. The path looks like:
#
#   BUILDKITE_BUILD_CHECKOUT_PATH="/var/lib/buildkite-agent/builds/my-agent-1/my-pipeline-blah"
#
# We know the beginning of this path, it's in BUILDKITE_BUILD_PATH:
#
#   BUILDKITE_BUILD_PATH="/var/lib/buildkite-agent/builds"

# So we can calculate the suffix as a substring:
BUILD_PATH_SUFFIX="${BUILDKITE_BUILD_CHECKOUT_PATH#${BUILDKITE_BUILD_PATH}/}"
# => "my-agent-1/my-pipeline-blah"

# Then we can grab just the first path component by removing the longest suffix starting with a slash:
AGENT_BUILD_NAME="${BUILD_PATH_SUFFIX%%/*}"
# => "my-agent-1"

# Now we can pass this to the sudo script which will validate it before safely chmodding:
echo "Fixing permissions for '${AGENT_BUILD_NAME}'..."
sudo /usr/bin/fix-buildkite-agent-builds-permissions "${AGENT_BUILD_NAME}"
echo
