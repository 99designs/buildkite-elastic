
Mappings:
  SubnetConfig:
    VPC: { CIDR: 10.0.0.0/16 }
    Subnet0: { CIDR: 10.0.1.0/24 }
    Subnet1: { CIDR: 10.0.2.0/24 }
    Subnet2: { CIDR: 10.0.3.0/24 }

Resources:
  Vpc:
    Type: AWS::EC2::VPC
    Condition: CreateVpcResources
    Properties:
      CidrBlock: !FindInMap [ SubnetConfig, VPC, CIDR ]
      InstanceTenancy: default
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: $(AWS::StackName)

  Gateway:
    Type: AWS::EC2::InternetGateway
    Condition: CreateVpcResources
    Properties: {}

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    DependsOn: Gateway
    Condition: CreateVpcResources
    Properties:
      InternetGatewayId: $(Gateway)
      VpcId: $(Vpc)

  Subnet0:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 0, $(AvailabilityZones) ],
        !Select [ 0, !GetAZs '' ]
      ]
      CidrBlock: !FindInMap [ SubnetConfig, Subnet0, CIDR ]
      VpcId: $(Vpc)

  Subnet1:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 1, $(AvailabilityZones) ],
        !Select [ 1, !GetAZs '' ]
      ]
      CidrBlock: !FindInMap [ SubnetConfig, Subnet1, CIDR ]
      VpcId: $(Vpc)

  Subnet2:
    Type: AWS::EC2::Subnet
    Condition: CreateVpcResources
    Properties:
      MapPublicIpOnLaunch: true
      AvailabilityZone: !If [
        "UseSpecifiedAvailabilityZones",
        !Select [ 0, $(AvailabilityZones) ],
        !Select [ 0, !GetAZs '' ]
      ]
      CidrBlock: !FindInMap [ SubnetConfig, Subnet2, CIDR ]
      VpcId: $(Vpc)

  NatGatewayEIP:
    Type: 'AWS::EC2::EIP'
    Condition: CreateVpcResources
    Properties:
      Domain: vpc

  NatGateway:
    Type: 'AWS::EC2::NatGateway'
    Condition: CreateVpcResources
    DependsOn: NatGatewayEIP
    Properties:
      AllocationId: $(NatGatewayEIP.AllocationId)
      SubnetId: $(Subnet2)

  RoutesPublic:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcResources
    Properties:
      VpcId: $(Vpc)

  RoutesPrivate:
    Type: AWS::EC2::RouteTable
    Condition: CreateVpcResources
    Properties:
      VpcId: $(Vpc)

  DefaultGatewayRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpcResources
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: $(Gateway)
      RouteTableId: $(RoutesPublic)

  NatGatewayRoute:
    Type: AWS::EC2::Route
    Condition: CreateVpcResources
    Properties:
      RouteTableId: $(RoutesPrivate)
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: $(NatGateway)

  Subnet0Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet0)
      RouteTableId: $(RoutesPrivate)

  Subnet1Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet1)
      RouteTableId: $(RoutesPrivate)

  Subnet2Routes:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: CreateVpcResources
    Properties:
      SubnetId: $(Subnet2)
      RouteTableId: $(RoutesPublic)
