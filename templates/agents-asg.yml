
Resources:
  # Allow ec2 instances to assume a role and be granted the IAMPolicies
  IAMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [ { Ref: IAMRole } ]

  IAMRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: { "Fn::Sub": "${AWS::StackName}-Role" }
      ManagedPolicyArns:
        - "Fn::If":
          - UseManagedPolicyARN
          - { Ref: ManagedPolicyARN }
          - { Ref: 'AWS::NoValue' }
        - "Fn::If":
          - UseECR
          - { "Fn::FindInMap": [ ECRManagedPolicy, { Ref: ECRAccessPolicy }, 'Policy' ] }
          - { Ref: 'AWS::NoValue' }
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com, ec2.amazonaws.com ]
            Action: sts:AssumeRole
      Path: /

  IAMPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: InstancePolicy
      PolicyDocument:
        Statement:
          - Effect: Allow
            Action:
              - cloudwatch:PutMetricData
              - cloudformation:DescribeStackResource
              - ec2:DescribeTags
              - autoscaling:DescribeAutoScalingInstances
              - autoscaling:DescribeLifecycleHooks
              - autoscaling:RecordLifecycleActionHeartbeat
              - autoscaling:CompleteLifecycleAction
              - autoscaling:SetInstanceHealth
            Resource: "*"
          - Effect: Allow
            Action:
              - logs:CreateLogGroup
              - logs:CreateLogStream
              - logs:PutLogEvents
              - logs:DescribeLogStreams
            Resource: "*"
          - Effect: Allow
            Action:
              - sqs:*
              - sns:Unsubscribe
              - sns:Subscribe
            Resource: "*"
      Roles:
        - { Ref: IAMRole }

  AgentLaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      SecurityGroups: [ "Fn::If": [ "CreateSecurityGroup", { Ref: SecurityGroup }, { Ref: SecurityGroupId } ] ]
      KeyName: { Ref: KeyName }
      IamInstanceProfile: { Ref: IAMInstanceProfile }
      InstanceType: { Ref: InstanceType }
      ImageId: !If [ UseDefaultAMI, !FindInMap [AWSRegion2AMI, !Ref "AWS::Region", AMI], !Ref ImageId ]
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs: { VolumeSize: { Ref: RootVolumeSize }, VolumeType: gp2 }
      UserData:
        "Fn::Base64":
          "Fn::Sub":
            - |
              #!/bin/bash -xv
              BUILDKITE_STACK_NAME="${AWS::StackName}" \
              BUILDKITE_STACK_VERSION=dev \
              BUILDKITE_SECRETS_BUCKET="${LocalSecretsBucket}" \
              BUILDKITE_AGENT_TOKEN="${BuildkiteAgentToken}" \
              BUILDKITE_AGENTS_PER_INSTANCE="${AgentsPerInstance}" \
              BUILDKITE_AGENT_TAGS="${BuildkiteAgentTags}" \
              BUILDKITE_AGENT_RELEASE="${BuildkiteAgentRelease}" \
              BUILDKITE_QUEUE="${BuildkiteQueue}" \
              BUILDKITE_ELASTIC_BOOTSTRAP_SCRIPT="${BootstrapScriptUrl}" \
              BUILDKITE_AUTHORIZED_USERS_URL="${AuthorizedUsersUrl}" \
              BUILDKITE_ECR_POLICY=${ECRAccessPolicy} \
              BUILDKITE_LIFECYCLE_TOPIC=${AgentLifecycleTopic} \
              AWS_DEFAULT_REGION=${AWS::Region} \
              SECRETS_PLUGIN_ENABLED=${EnableSecretsPlugin} \
              ECR_PLUGIN_ENABLED=${EnableECRPlugin} \
              DOCKER_LOGIN_PLUGIN_ENABLED=${EnableDockerLoginPlugin} \
              DOCKER_USERNS_REMAP=${EnableDockerUserNamespaceRemap} \
              AWS_REGION=${AWS::Region} \
                /usr/local/bin/bk-install-elastic-stack.sh
            - LocalSecretsBucket:
                "Fn::If":
                  - CreateSecretsBucket
                  - { Ref: ManagedSecretsBucket }
                  - { Ref: SecretsBucket }

  AgentLifecycleTopic:
    Type: AWS::SNS::Topic

  AgentLifecycleHookRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: [ autoscaling.amazonaws.com ]
            Action: sts:AssumeRole
      Policies:
        - PolicyName: AgentLifecyclePolicy
          PolicyDocument:
            Statement:
              - Effect: Allow
                Action:
                  - sns:Publish
                Resource: { Ref: AgentLifecycleTopic }
      Path: /

  AgentLifecycleHook:
    Type: AWS::AutoScaling::LifecycleHook
    Properties:
      AutoScalingGroupName: { Ref: AgentAutoScaleGroup }
      LifecycleTransition: autoscaling:EC2_INSTANCE_TERMINATING
      DefaultResult: CONTINUE
      HeartbeatTimeout: 120
      NotificationTargetARN: { Ref: AgentLifecycleTopic }
      RoleARN: { "Fn::GetAtt" : [ "AgentLifecycleHookRole", "Arn" ] }

  AgentAutoScaleGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: !If [
        CreateVpcResources,
        !If [
          HasPrivateSubnets,
          !If [
            HasPrivateSubnet6,
            [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3, !Ref PrivateSubnet4, !Ref PrivateSubnet5, !Ref PrivateSubnet6 ],
            !If [
              HasPrivateSubnet5,
              [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3, !Ref PrivateSubnet4, !Ref PrivateSubnet5 ],
              !If [
                HasPrivateSubnet4,
                [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3, !Ref PrivateSubnet4 ],
                !If [
                  HasPrivateSubnet3,
                  [ !Ref PrivateSubnet1, !Ref PrivateSubnet2, !Ref PrivateSubnet3 ],
                  [ !Ref PrivateSubnet1, !Ref PrivateSubnet2 ]
                ]
              ]
            ]
          ],
          !If [
            HasPublicSubnet6,
            [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PublicSubnet4, !Ref PublicSubnet5, !Ref PublicSubnet6 ],
            !If [
              HasPublicSubnet5,
              [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PublicSubnet4, !Ref PublicSubnet5 ],
              !If [
                HasPublicSubnet4,
                [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3, !Ref PublicSubnet4 ],
                !If [
                  HasPublicSubnet3,
                  [ !Ref PublicSubnet1, !Ref PublicSubnet2, !Ref PublicSubnet3 ],
                  [ !Ref PublicSubnet1, !Ref PublicSubnet2 ]
                ]
              ]
            ]
          ]
        ],
        !Ref Subnets
      ]
      LaunchConfigurationName: { Ref: AgentLaunchConfiguration }
      MinSize: { Ref: MinSize }
      MaxSize: { Ref: MaxSize }
      MetricsCollection:
        - Granularity: 1Minute
          Metrics:
            - GroupMinSize
            - GroupMaxSize
            - GroupInServiceInstances
            - GroupTerminatingInstances
            - GroupPendingInstances
      TerminationPolicies:
        - OldestLaunchConfiguration
        - ClosestToNextInstanceHour
      Tags:
        - Key: Role
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: Name
          Value: buildkite-agent
          PropagateAtLaunch: true
        - Key: BuildkiteAgentRelease
          Value: { Ref: BuildkiteAgentRelease }
          PropagateAtLaunch: true
        - Key: BuildkiteQueue
          Value: { Ref: BuildkiteQueue }
          PropagateAtLaunch: true

    CreationPolicy:
      ResourceSignal:
        Timeout: PT5M
        Count: { Ref: MinSize }
    UpdatePolicy:
      AutoScalingReplacingUpdate:
        WillReplace: true

  AgentScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: UseAutoscaling
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: { Ref: AgentAutoScaleGroup }
      Cooldown: 300
      ScalingAdjustment : { Ref: ScaleUpAdjustment }

  AgentScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Condition: UseAutoscaling
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: { Ref: AgentAutoScaleGroup }
      Cooldown: 300
      ScalingAdjustment: { Ref: ScaleDownAdjustment }

  AgentUtilizationAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Condition: UseAutoscaling
    Properties:
      AlarmDescription: Scale-up if ScheduledJobs > 0 for 1 minute
      MetricName: ScheduledJobsCount
      Namespace: Buildkite
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 0
      AlarmActions: [ { Ref: AgentScaleUpPolicy } ]
      Dimensions:
        - Name: Queue
          Value: { Ref: BuildkiteQueue }
      ComparisonOperator: GreaterThanThreshold

  AgentUtilizationAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Condition: UseAutoscaling
    Properties:
      AlarmDescription: Scale-down if UnfinishedJobs == 0 for N minutes
      MetricName: UnfinishedJobsCount
      Namespace: Buildkite
      Statistic: Maximum
      Period: { Ref: ScaleDownPeriod }
      EvaluationPeriods: 1
      Threshold: 0
      AlarmActions: [ { Ref: AgentScaleDownPolicy } ]
      Dimensions:
        - Name: Queue
          Value: { Ref: BuildkiteQueue }
      ComparisonOperator: LessThanOrEqualToThreshold

Outputs:
  AutoScalingGroupName:
    Value: { Ref: AgentAutoScaleGroup }
