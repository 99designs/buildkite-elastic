AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  VpcId:
    Type: String
  
  SubnetId:
    Type: String

  BuildkiteSecurityGroupId:
    Type: String
  
  KeyName:
    Type: String

Resources:
  DockerVulnerabilityRoute53: 
    Type: "AWS::Route53::HostedZone"
    Properties: 
      HostedZoneConfig: 
        Comment: "Docker vulnerability scanning"
      Name: "docker-vuln.oculo.io"
      VPCs: 
        - 
          VPCId: !Ref VpcId
          VPCRegion: !Ref AWS::Region

  DockerVulnerabilityRoute53Record:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref DockerVulnerabilityRoute53
      Name: 'clair.docker-vuln.oculo.io'
      Type: A
      TTL: '900'
      ResourceRecords:
      - !GetAtt ECSContainerInstance.PrivateIp

  DockerVulnerabilityScanningEcsCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: clair-docker-vulnerability-scanning

  DockerVulnerabilityScanningEcsClusterSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: ECS Security Group
      VpcId: !Ref 'VpcId'

  DockerVulnerabilityScanningEcsClusterSecurityGroupClairInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'DockerVulnerabilityScanningEcsClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: '6060'
      ToPort: '6060'
      SourceSecurityGroupId: !Ref BuildkiteSecurityGroupId

  DockerVulnerabilityScanningEcsClusterSecurityGroupClairHealthcheckInbound:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'DockerVulnerabilityScanningEcsClusterSecurityGroup'
      IpProtocol: tcp
      FromPort: '6061'
      ToPort: '6061'
      SourceSecurityGroupId: !Ref BuildkiteSecurityGroupId

  CloudwatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['-', [ECSLogGroup, !Ref 'AWS::StackName']]
      RetentionInDays: 14

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: ecr-vulnerability-scanning
      ContainerDefinitions:
      - Name: postgres
        Cpu: '100'
        Essential: 'true'
        Image: postgres:latest
        Memory: '100'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: postgres
        Environment:
          - Name: POSTGRES_PASSWORD
            Value: password 
      - Name: clair
        Cpu: '500'
        Essential: 'true'
        Image: 644358627301.dkr.ecr.ap-southeast-2.amazonaws.com/oculo/infrastructure_clair:latest
        MemoryReservation: '1500'
        LogConfiguration:
          LogDriver: awslogs
          Options:
            awslogs-group: !Ref 'CloudwatchLogsGroup'
            awslogs-region: !Ref 'AWS::Region'
            awslogs-stream-prefix: clair
        PortMappings:
          - ContainerPort: 6060
            HostPort: 6060
          - ContainerPort: 6061
            HostPort: 6061
        Links:
          - postgres

  ECSContainerInstance:
    Type: AWS::EC2::Instance
    Properties:
      ImageId: ami-01711df8fe87a6217  # ecs optimised AMI
      SecurityGroupIds: [!GetAtt 'DockerVulnerabilityScanningEcsClusterSecurityGroup.GroupId']
      InstanceType: t2.small
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      SubnetId: !Ref SubnetId
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          sudo yum install -y https://s3.amazonaws.com/ec2-downloads-windows/SSMAgent/latest/linux_amd64/amazon-ssm-agent.rpm
          echo ECS_CLUSTER=${DockerVulnerabilityScanningEcsCluster} >> /etc/ecs/ecs.config
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ECSAutoScalingGroup --region ${AWS::Region}
      Tags:
        - Key: Name
          Value: ecr-vulnerability-scanning

  service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref 'DockerVulnerabilityScanningEcsCluster'
      DesiredCount: '1'
      TaskDefinition: !Ref 'TaskDefinition'
  
  
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role
      Policies:
      - PolicyName: ecs-service
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action: ['ecs:CreateCluster', 'ecs:DeregisterContainerInstance', 'ecs:DiscoverPollEndpoint',
              'ecs:Poll', 'ecs:RegisterContainerInstance', 'ecs:StartTelemetrySession',
              'ecs:Submit*', 'logs:CreateLogStream', 'logs:PutLogEvents']
            Resource: '*'
            
  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']
